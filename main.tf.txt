terraform {
  required_providers {
    yandex = {
      source = "yandex-cloud/yandex"
    }
  }
}
locals {
  zone = "ru-central1-b"
}

provider "yandex" {
  cloud_id  = "b1gcrqu772dos233asd0"
  folder_id = "b1gmhlplt9a399ueaniq"
  zone      = "ru-central1-b"
}

resource "yandex_compute_disk" "bastion-host-disk" {
  name     = "bastion-host-disk"
  zone     = local.zone
  size     = 8
  image_id = "fd833v6c5tb0udvk4jo6"
}

resource "yandex_compute_instance" "bastion-host" {
  name                      = "bastion-host"
  allow_stopping_for_update = true
  platform_id               = "standard-v3"
  zone                      = local.zone

  resources {
    core_fraction = 20
    cores         = 2
    memory        = 2
  }

  boot_disk {
    disk_id = yandex_compute_disk.bastion-host-disk.id
  }

  network_interface {
    subnet_id = yandex_vpc_subnet.subnet-1.id
    security_group_ids = [yandex_vpc_security_group.my-sg.id]
    nat       = true
  }

  metadata = {
    user-data = "${file("./meta.yml")}"
  }
}

resource "yandex_compute_disk" "vm1-ubuntu2204-disk" {
  name     = "vm1-ubuntu2204-disk"
  zone     = local.zone
  size     = 8
  image_id = "fd833v6c5tb0udvk4jo6"
}

resource "yandex_compute_instance" "vm1-ubuntu2204" {
  name                      = "vm1-ubuntu2204"
  allow_stopping_for_update = true
  platform_id               = "standard-v3"
  zone                      = local.zone

  resources {
    core_fraction = 20
    cores         = 2
    memory        = 2
  }

  boot_disk {
    disk_id = yandex_compute_disk.vm1-ubuntu2204-disk.id
  }

  network_interface {
    subnet_id = yandex_vpc_subnet.subnet-1.id
    nat       = false
  }

  metadata = {
    user-data = "${file("./meta.yml")}"
  }
}

resource "yandex_compute_disk" "vm2-ubuntu2204-disk" {
  name     = "vm2-ubuntu2204-disk"
  zone     = local.zone
  size     = 8
  image_id = "fd833v6c5tb0udvk4jo6"
}

resource "yandex_compute_instance" "vm2-ubuntu2204" {
  name                      = "vm2-ubuntu2204"
  allow_stopping_for_update = true
  platform_id               = "standard-v3"
  zone                      = "ru-central1-d"

  resources {
    core_fraction = 20
    cores         = 2
    memory        = 2
  }

  boot_disk {
    disk_id = yandex_compute_disk.vm2-ubuntu2204-disk.id
  }

  network_interface {
    subnet_id = yandex_vpc_subnet.subnet-2.id
    nat       = false
  }

  metadata = {
    user-data = "${file("./meta.yml")}"
  }
}

resource "yandex_compute_disk" "zabbix-ubuntu2204-disk" {
  name     = "zabbix-ubuntu2204-disk"
  zone     = local.zone
  size     = 8
  image_id = "fd833v6c5tb0udvk4jo6"
}

resource "yandex_compute_instance" "zabbix-ubuntu2204" {
  name                      = "zabbix-ubuntu2204"
  allow_stopping_for_update = true
  platform_id               = "standard-v3"
  zone                      = local.zone

  resources {
    core_fraction = 20
    cores         = 2
    memory        = 2
  }

  boot_disk {
    disk_id = yandex_compute_disk.zabbix-ubuntu2204-disk.id
  }

  network_interface {
    subnet_id = yandex_vpc_subnet.subnet-1.id
    security_group_ids = [yandex_vpc_security_group.my-sg.id]
    nat       = true
  }

  metadata = {
    user-data = "${file("./meta.yml")}"
  }
}

resource "yandex_compute_disk" "elk-debian10-disk" {
  name     = "elk-debian10-disk"
  zone     = local.zone
  size     = 8
  image_id = "fd829qvrap41jvg5u68c"
}

resource "yandex_compute_instance" "elk-debian10" {
  name                      = "elk-debian10"
  allow_stopping_for_update = true
  platform_id               = "standard-v3"
  zone                      = local.zone

  resources {
    core_fraction = 20
    cores         = 2
    memory        = 6
  }

  boot_disk {
    disk_id = yandex_compute_disk.elk-debian10-disk.id
  }

  network_interface {
    subnet_id = yandex_vpc_subnet.subnet-1.id
    security_group_ids = [yandex_vpc_security_group.my-sg.id]
    nat       = true
  }

  metadata = {
    user-data = "${file("./meta.yml")}"
  }
}

resource "yandex_compute_disk" "kibana-debian10-disk" {
  name     = "kibana-debian10-disk"
  zone     = local.zone
  size     = 8
  image_id = "fd829qvrap41jvg5u68c"
}

resource "yandex_compute_instance" "kibana-debian10" {
  name                      = "kibana-debian10"
  allow_stopping_for_update = true
  platform_id               = "standard-v3"
  zone                      = local.zone

  resources {
    core_fraction = 20
    cores         = 2
    memory        = 4
  }

  boot_disk {
    disk_id = yandex_compute_disk.kibana-debian10-disk.id
  }

  network_interface {
    subnet_id = yandex_vpc_subnet.subnet-1.id
    security_group_ids = [yandex_vpc_security_group.my-sg.id]
    nat       = true
  }

  metadata = {
    user-data = "${file("./meta.yml")}"
  }
}

resource "yandex_vpc_network" "network-1" {
  name = "network-1"
}

resource "yandex_vpc_subnet" "subnet-1" {
  name           = "subnet1"
  zone           = "ru-central1-b"
  network_id     = yandex_vpc_network.network-1.id
  v4_cidr_blocks = ["192.168.10.0/24"]
}

resource "yandex_vpc_security_group" "my-sg" {
  name    = "my-sg"
  network_id     = yandex_vpc_network.network-1.id
  ingress {
#    protocol       = "TCP"
    protocol       = "ANY"
    description    = "rule1 description"
    v4_cidr_blocks = ["0.0.0.0/0"]
    port           = 22
  }

  ingress {
#    protocol       = "TCP"
    protocol       = "ANY"
    description    = "rule2 description"
    v4_cidr_blocks = ["0.0.0.0/0"]
    port           = 10050
  }

    ingress {
#    protocol       = "TCP"
    protocol       = "ANY"
    description    = "rule3 description"
    v4_cidr_blocks = ["0.0.0.0/0"]
    port           = 5601
  }

    ingress {
#    protocol       = "TCP"
    protocol       = "ANY"
    description    = "rule4 description"
    v4_cidr_blocks = ["0.0.0.0/0"]
    port           = 80
  }

    ingress {
#    protocol       = "TCP"
    protocol       = "ANY"
    description    = "rule5 description"
    v4_cidr_blocks = ["0.0.0.0/0"]
    port           = 443
  }

    ingress {
#    protocol       = "TCP"
    protocol       = "ANY"
    description    = "rule6 description"
    v4_cidr_blocks = ["0.0.0.0/0"]
    port           = 30080
  }

  egress {
    protocol       = "ANY"
    description    = "rule2 description"
    v4_cidr_blocks = ["0.0.0.0/0"]
  }
}


resource "yandex_vpc_network" "network-2" {
  name = "network-2"
}

resource "yandex_vpc_subnet" "subnet-2" {
  name           = "subnet2"
  zone           = "ru-central1-d"
  network_id     = yandex_vpc_network.network-2.id
  v4_cidr_blocks = ["192.168.10.0/24"]
}

resource "yandex_alb_target_group" "target-1" {
  name = "target-1"

  target {
    subnet_id  = yandex_vpc_subnet.subnet-1.id
    ip_address = "${yandex_compute_instance.vm1-ubuntu2204.network_interface.0.ip_address}"
  }

  target {
    subnet_id  = yandex_vpc_subnet.subnet-2.id
    ip_address = "${yandex_compute_instance.vm2-ubuntu2204.network_interface.0.ip_address}"

  }
}

resource "yandex_alb_backend_group" "test-backend-group" {
  name = "test-backend-group"
  http_backend {
    name             = "backend-group"
    weight           = 1
    port             = 80
    target_group_ids = [yandex_alb_target_group.target-1.id]
    load_balancing_config {
      panic_threshold = 90
    }
    healthcheck {
      timeout             = "10s"
      interval            = "2s"
      healthy_threshold   = 10
      unhealthy_threshold = 15
      http_healthcheck {
        path = "/"
      }
    }
  }
}

resource "yandex_alb_http_router" "http-router" {
  name = "http-router"
  labels = {
    tf-label    = "tf-label-value"
    empty-label = ""
  }
}

resource "yandex_alb_virtual_host" "my-virtual-host" {
  name           = "virtual-host"
  http_router_id = yandex_alb_http_router.http-router.id
  route {
    name = "marshrut"
    http_route {
      http_route_action {
        backend_group_id = yandex_alb_backend_group.test-backend-group.id
        timeout          = "60s"
      }
    }
  }
}

resource "yandex_alb_load_balancer" "test-balancer" {
  name               = "test-balancer"
  network_id         = yandex_vpc_network.network-1.id
  security_group_ids = [yandex_vpc_security_group.my-sg.id]

  allocation_policy {
    location {
      zone_id   = "ru-central1-b"
      subnet_id = yandex_vpc_subnet.subnet-1.id
    }
  }

  listener {
    name = "listener"
    endpoint {
      address {
        external_ipv4_address {
        }
      }
      ports = [80]
    }
    http {
      handler {
        http_router_id = yandex_alb_http_router.http-router.id
      }
    }
  }
}

resource "yandex_compute_snapshot_schedule" "default" {
  name = "disksnapshot"

  schedule_policy {
    expression = "0 0 * * *"
  }

  snapshot_count = 7

  snapshot_spec {
    description = "snapshot-description"
    labels = {
      snapshot-label = "my-snapshot-label-value"
    }
  }

  disk_ids = [yandex_compute_disk.bastion-host-disk.id, yandex_compute_disk.vm1-ubuntu2204-disk.id, yandex_compute_disk.vm2-ubuntu2204-disk.id, yandex_compute_disk.zabbix-ubuntu2204-disk.id, yandex_compute_disk.elk-debian10-disk.id, yandex_compute_disk.kibana-debian10-disk.id]
}
